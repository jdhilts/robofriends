{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","width","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCJSC,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,kBAAC,WAAD,KACA,yBAAKC,UAAW,uDAChB,yBAAKC,IAAM,SAASC,IAAG,+BAA4BL,EAA5B,mBACvB,4BAAKC,GACL,2BAAIC,MCYSI,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CAAMC,IAAOD,EACbV,GAAMO,EAAOG,GAAGV,GAChBC,KAAQM,EAAOG,GAAGT,KAClBW,SAAYL,EAAOG,GAAGE,SACtBV,MAASK,EAAOG,GAAGR,aCETW,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,kBAAC,WAAD,KACA,2BACAX,UAAY,mCACZY,KAAM,SACNC,YAAc,eACdC,SAAYH,MCCCI,EATA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAC1BC,OAAQ,kBACRC,OAAQ,UACPJ,EAAMK,WCYMC,E,YAhBd,WAAYN,GAAO,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACZC,UAAU,GAHM,E,+EAMAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACN,8DAEDG,KAAKX,MAAMK,a,GAdQQ,aCqDbC,E,YA9Cd,aAAc,IAAD,8BACZ,+CAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACZnB,OAAQ,GACR6B,YAAa,IAJF,E,iFAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAO9B,IAAD,EACuBb,KAAKJ,MAA5BnB,EADA,EACAA,OAAQ6B,EADR,EACQA,YACTQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEtD,OACC,kBAAC,WAAD,KACA,yBAAK5C,UAAY,MACjB,6BACA,yBACAE,IAAM,aACND,IAAM,cACNmB,OAAS,QACT0B,MAAQ,WAGR,kBAAC,EAAD,CAAWnC,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAUqC,Y,GAtCLM,IAAMlB,WCDxBmB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.32d8e47a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {Fragment} from 'react';\n\nconst Card = ({id, name, email}) => {\n\treturn(\n\t\t<Fragment>\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt = 'Robots' src = {`https://robohash.org/${id}?size=200x200`} />\t\t\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t\t</div>\n\t\t</Fragment>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn(\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card key = {i} \n\t\t\t\t\tid = {robots[i].id} \n\t\t\t\t\tname = {robots[i].name} \n\t\t\t\t\tusername = {robots[i].username} \n\t\t\t\t\temail = {robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t\t);\n}\nexport default CardList;","import React from 'react';\nimport {Fragment} from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<Fragment>\n\t\t<input \n\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\ttype ='search' \n\t\tplaceholder = 'Search Robot'\n\t\tonChange = {searchChange}\n\t\t/>\n\t\t</Fragment>\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{overflowY: 'scroll',\n\t\tborder: '1px solid black',\n\t\theight: '800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true});\n\t}\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oooopps! Something went wrong.</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\nexport default ErrorBoundary;\n","import React from 'react';\nimport 'tachyons';\nimport {Fragment} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: '',\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots: users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value});\n\t}\t\n\n\trender(){\n\t\tconst {robots, searchfield} = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t});\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t<div className = 'tc'>\n\t\t\t<div>\n\t\t\t<img \n\t\t\tsrc = './logo.png'\n\t\t\talt = 'RoboFriends'\n\t\t\theight = '200px'\n\t\t\twidth = '200px'\n\t\t\t/>\n\t\t\t</div>\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t<ErrorBoundary>\n\t\t\t<CardList robots = {filteredRobots}/>\n\t\t\t</ErrorBoundary>\n\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t</Fragment>\n\t\t\t);\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}